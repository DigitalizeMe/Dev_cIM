@prefix sh:    <http://www.w3.org/ns/shacl#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#> .
@prefix time:  <http://www.w3.org/2006/time#> .
@prefix osh:   <http://www.ocpshape.de/shape#> .

#################################################################
#    SHACL Shapes
#################################################################

### GENERAL SHACL SHAPES

    osh:GeneralDatePropertyShape a sh:PropertyShape ;
        sh:path ( ocp:hasActualTime ocp:hasEstimatedTime ) ;
        sh:datatype xsd:dateTime ;
        sh:message "Dates must be in YYYY-MM-DDThh:mm:ss format."@en ;
        sh:severity sh:Violation .

    osh:GeneralTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:property [
            sh:path ocp:hasActualBeginning ;
            sh:class time:Instant ;
            sh:maxCount 1 ;
            sh:message "Each entity must have at most one actual beginning via 'ocp:hasActualBeginning'."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ocp:hasActualEnd ;
            sh:class time:Instant ;
            sh:maxCount 1 ;
            sh:message "Each entity must have at most one actual end via 'ocp:hasActualEnd'."@en ;
            sh:severity sh:Violation ;
        ] .

    osh:PhaseTimeExistenceShape a sh:NodeShape ;
        sh:targetClass ocp:Phase ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    {
                        SELECT $this (COUNT(DISTINCT ?start) AS ?count)
                        WHERE {
                            { $this ocp:hasActualBeginning ?start . ?start ocp:hasActualTime ?startTime . }
                            UNION
                            { $this ocp:beginsWith ?entity . ?entity (ocp:beginsWith)* ?start .
                            ?start a time:Instant ; ocp:hasActualTime ?startTime . }
                        }
                        GROUP BY $this
                        HAVING (?count > 1)
                    }
                }
            """ ;
            sh:message "Each phase must have at most one actual beginning (via ocp:hasActualBeginning or ocp:beginsWith leading to an instant with ocp:hasActualTime)."@en ;
            sh:severity sh:Violation
        ] ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?start
                WHERE {
                    {
                        $this ocp:hasActualBeginning ?start . ?start ocp:hasActualTime ?startTime .
                    } UNION
                    {
                        $this ocp:beginsWith ?entity . ?entity (ocp:beginsWith)* ?start .
                        ?start a time:Instant ; ocp:hasActualTime ?startTime .
                    }
                    FILTER NOT EXISTS {
                        { $this ocp:hasActualEnd ?end . ?end ocp:hasActualTime ?endTime . }
                        UNION
                        { $this ocp:hasEstimatedEnd ?end . ?end ocp:hasEstimatedTime ?endTime . }
                        UNION
                        { $this ocp:endsWith ?endEntity . ?endEntity (ocp:endsWith)* ?end .
                        ?end a time:Instant ; ocp:hasActualTime ?endTime . }
                        UNION
                        { $this ocp:endsWith ?endEntity . ?endEntity (ocp:endsWith)* ?end .
                        ?end a time:Instant ; ocp:hasEstimatedTime ?endTime . }
                    }
                }
            """ ;
            sh:message "Phase {$this} with actual beginning (via ocp:hasActualBeginning or ocp:beginsWith to instant {$start} with ocp:hasActualTime) lacks an end (via ocp:hasActualEnd, ocp:hasEstimatedEnd, or ocp:endsWith)."@en ;
            sh:severity sh:Violation
        ] ;
        sh:property [
            sh:path ocp:hasActualBeginning ;
            sh:maxCount 1 ;
            sh:class time:Instant ;
            sh:message "Each phase must have at most one ocp:hasActualBeginning referencing a time:Instant."@en ;
            sh:severity sh:Violation
        ] ;
        sh:property [
            sh:path ocp:hasActualEnd ;
            sh:maxCount 1 ;
            sh:class time:Instant ;
            sh:message "Each phase must have at most one ocp:hasActualEnd referencing a time:Instant."@en ;
            sh:severity sh:Violation
        ] .

    osh:PhaseTimeOrderShape a sh:NodeShape ;
        sh:targetClass ocp:Phase ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                SELECT $this
                WHERE {
                    FILTER NOT EXISTS { $this ocp:belongsToProcess ?process . ?process a ocp:Process . }
                    {
                        SELECT $this (COUNT(?p) AS ?count)
                        WHERE { ?p ocp:containsPhase $this . ?p a ocp:Process . }
                        GROUP BY $this
                        HAVING (?count != 1)
                    }
                }
            """ ;
            sh:message "Phase {$this} must either belong to exactly one process via ocp:belongsToProcess or be contained by exactly one process via ocp:containsPhase."@en ;
            sh:severity sh:Violation
        ] ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?timeStart ?timeEnd
                WHERE {
                    $this ocp:hasActualBeginning ?start . ?start ocp:hasActualTime ?timeStart .
                    $this ocp:hasActualEnd ?end . ?end ocp:hasActualTime ?timeEnd .
                    FILTER (?timeStart >= ?timeEnd)
                }
            """ ;
            sh:message "For phase {$this}: Actual beginning time ({?timeStart} via ocp:hasActualBeginning) must be before actual end time ({?timeEnd} via ocp:hasActualEnd)."@en ;
            sh:severity sh:Violation
        ] .

    osh:PhaseBeginningCardinalityShape a sh:NodeShape ;
        sh:targetClass ocp:Phase ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    {
                        SELECT $this (COUNT(DISTINCT ?start) AS ?count)
                        WHERE {
                            { $this ocp:hasActualBeginning ?start . ?start ocp:hasActualTime ?startTime . }
                            UNION
                            { $this ocp:beginsWith ?entity . ?entity (ocp:beginsWith)* ?start .
                            ?start a time:Instant ; ocp:hasActualTime ?startTime . }
                        }
                        GROUP BY $this
                        HAVING (?count > 1)
                    }
                }
            """ ;
            sh:message "Phase {$this} must have at most one actual beginning (via ocp:hasActualBeginning or ocp:beginsWith leading to an instant with ocp:hasActualTime)."@en ;
            sh:severity sh:Violation
        ] ;
        sh:property [
            sh:path ocp:hasActualBeginning ;
            sh:class time:Instant ;
            sh:maxCount 1 ;
            sh:message "Each phase must have at most one ocp:hasActualBeginning referencing a time:Instant."@en ;
            sh:severity sh:Violation
        ] .

    osh:PhaseEndCardinalityShape a sh:NodeShape ;
        sh:targetClass ocp:Phase ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    {
                        SELECT $this (COUNT(DISTINCT ?end) AS ?count)
                        WHERE {
                            { $this ocp:hasActualEnd ?end . ?end ocp:hasActualTime ?endTime . }
                            UNION
                            { $this ocp:endsWith ?entity . ?entity (ocp:endsWith)* ?end .
                            ?end a time:Instant ; ocp:hasActualTime ?endTime . }
                        }
                        GROUP BY $this
                        HAVING (?count > 1)
                    }
                }
            """ ;
            sh:message "Phase {$this} must have at most one actual end (via ocp:hasActualEnd or ocp:endsWith leading to an instant with ocp:hasActualTime)."@en ;
            sh:severity sh:Violation
        ] ;
        sh:property [
            sh:path ocp:hasActualEnd ;
            sh:class time:Instant ;
            sh:maxCount 1 ;
            sh:message "Each phase must have at most one ocp:hasActualEnd referencing a time:Instant."@en ;
            sh:severity sh:Violation
        ] .

    osh:InstantTimeShape a sh:NodeShape ;
        sh:targetClass time:Instant ;
        sh:property [
            sh:path [ sh:alternativePath ( ocp:hasActualTime ocp:hasEstimatedTime ) ] ;
            sh:qualifiedValueShape [
                sh:datatype xsd:dateTime ;
            ] ;
            sh:qualifiedMinCount 1 ;
            sh:message "Each instant must have at least one timestamp (either 'ocp:hasActualTime' or 'ocp:hasEstimatedTime') of type xsd:dateTime."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ocp:hasActualTime ;
            sh:datatype xsd:dateTime ;
            sh:maxCount 1 ;
            sh:message "Each instant must have at most one actual timestamp via ocp:hasActualTime of type xsd:dateTime."@en ;
            sh:severity sh:Violation ;
        ] .

    osh:CycleShape a sh:NodeShape ;
        sh:targetClass ocp:Cycle ;
        sh:property [
            sh:path ocp:belongsToProcess ;
            sh:class ocp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'ocp:Cycle' must belong to exactly one 'ocp:Process' via 'ocp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasCycleNumber
        sh:property [
            sh:path ocp:hasCycleNumber ;
            sh:datatype xsd:integer ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:minInclusive 1 ;
            sh:message "Each 'ocp:Cycle' must specify exactly one positive integer via 'ocp:hasCycleNumber' to indicate the number of iterations."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasActualBeginning
        sh:property [
            sh:path ocp:hasActualBeginning ;
            sh:class time:Instant ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'ocp:Cycle' must have exactly one 'ocp:hasActualBeginning' referencing a 'time:Instant' to mark its start."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for end (at least one end: actual or estimated, but max 1 actualEnd)
        sh:property [
            sh:path ocp:hasActualEnd ;
            sh:class time:Instant ;
            sh:maxCount 1 ;
            sh:message "Each 'ocp:Cycle' must have at most one 'ocp:hasActualEnd' referencing a 'time:Instant'."@en ;
            sh:severity sh:Violation
        ] ;
        sh:or (
            [ sh:property [ sh:path ocp:hasActualEnd ; sh:minCount 1 ; sh:class time:Instant ] ]
            [ sh:property [ sh:path ocp:hasEstimatedEnd ; sh:minCount 1 ; sh:class time:Instant ] ]
        ) ;
        sh:message "Each 'ocp:Cycle' must have at least one end (either 'ocp:hasActualEnd' or 'ocp:hasEstimatedEnd') referencing a 'time:Instant'."@en ;
        sh:severity sh:Violation .

    osh:ProcessShape a sh:NodeShape ;
        sh:targetClass ocp:Process ;
        # Constraint for hasProcessID
        sh:property [
            sh:path ocp:hasProcessID ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'ocp:Process' must have exactly one 'ocp:hasProcessID' of type xsd:string to provide a unique identifier."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for containsPhase (process contains phases)
        sh:property [
            sh:path ocp:containsPhase ;
            sh:minCount 1 ;
            sh:message "Each 'ocp:Process' must consist of at least one instance of 'ocp:Phase' connected via 'ocp:containsPhase'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for isInPhase (process is contained in exactly one phase, if present)
        sh:property [
            sh:path ocp:isInPhase ;
            sh:class ocp:Phase ;
            sh:maxCount 1 ;
            sh:message "Each 'ocp:Process' must be embedded in at most one 'ocp:Phase' via 'ocp:isInPhase'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint to ensure phases belong to a process
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                SELECT $this ?phase
                WHERE {
                    $this ocp:containsPhase ?phase .
                    ?phase ocp:belongsToProcess ?otherProcess .
                    FILTER (?otherProcess != $this)
                }
            """ ;
            sh:message "For 'ocp:Process': Each phase contained via 'ocp:containsPhase' must belong to the same process via 'ocp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Removed shapes for beginning and end, because processes contain phases, which have beginnings and ends (should suffice)
        # Prevent inception (process cannot be in a phase it contains)
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                SELECT $this
                WHERE {
                    $this ocp:isInPhase ?phase .
                    $this ocp:hasPhase ?phase .
                }
            """ ;
            sh:message "For 'ocp:Process': A process cannot be embedded in a phase (ocp:isInPhase) that it also contains (ocp:hasPhase)."@en ;
            sh:severity sh:Violation
        ] .
    
    osh:ContainsTemporalEntityShape a sh:NodeShape ;
        sh:targetClass ocp:Process ;
        # Constraint for containsTemporalEntity
        sh:property [
            sh:path ocp:containsTemporalEntity ;
            sh:class time:TemporalEntity ;
            sh:message "Each 'ocp:containsTemporalEntity' must reference an instance of 'time:TemporalEntity' (e.g., time:Instant or time:Interval) that is contained in a 'ocp:Process'."@en ;
            sh:severity sh:Violation
        ] .

    osh:ContainsProcessShape a sh:NodeShape ;
        sh:targetClass ocp:Phase ;
        # Constraint for containsProcess
        sh:property [
            sh:path ocp:containsProcess ;
            sh:class ocp:Process ;
            sh:message "Each 'ocp:containsProcess' must reference an instance of 'ocp:Process' that is contained in a 'ocp:Phase'."@en ;
            sh:severity sh:Violation
        ] ;
        # Prevent cycles involving containsProcess (a phase cannot indirectly contain a process that contains it)
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                SELECT $this
                WHERE {
                    $this ocp:containsProcess ?process .
                    ?process ocp:containsPhase+ ?cycle .
                    FILTER (?cycle = $this)
                }
            """ ;
            sh:message "For 'ocp:Phase': A phase cannot contain a process via 'ocp:containsProcess' that indirectly contains the same phase via 'ocp:containsPhase' (no cycles allowed)."@en ;
            sh:severity sh:Violation
        ] .

    osh:IsInProcessShape a sh:NodeShape ;
        sh:targetClass ocp:Phase ;
        # Constraint for isInProcess
        sh:property [
            sh:path ocp:isInProcess ;
            sh:class ocp:Process ;
            sh:maxCount 1 ;
            sh:message "Each 'ocp:Phase' can be embedded in at most one 'ocp:Process' via 'ocp:isInProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure consistency with containsProcess or containsPhase
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                SELECT $this ?parent
                WHERE {
                    $this ocp:isInProcess ?parent .
                    FILTER NOT EXISTS { ?parent ocp:containsPhase $this }
                    FILTER NOT EXISTS { ?parent ocp:containsProcess $this }
                }
            """ ;
            sh:message "For 'ocp:Phase': If embedded in a process via 'ocp:isInProcess', the parent process must contain it via 'ocp:containsPhase' or 'ocp:containsProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Prevent cycles involving isInProcess
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                SELECT $this
                WHERE {
                    $this ocp:isInProcess ?process .
                    ?process ocp:containsPhase+ ?cycle .
                    FILTER (?cycle = $this)
                }
            """ ;
            sh:message "For 'ocp:Phase': A phase cannot be embedded in a process via 'ocp:isInProcess' that indirectly contains the same phase via 'ocp:containsPhase' (no cycles allowed)."@en ;
            sh:severity sh:Violation
        ] .


    ocp:NoTransitionDomainMisuseShape
        a sh:NodeShape ;
        sh:targetClass ocp:Transition ;
        sh:property [
            sh:path ocp:belongsToPhase ;
            sh:maxCount 0 ;
            sh:message "A Transition must not use ocp:belongsToPhase."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ocp:belongsToCycle ;
            sh:maxCount 0 ;
            sh:message "A Transition must not use ocp:belongsToCycle."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ocp:endsPhase ;
            sh:maxCount 0 ;
            sh:message "A Transition must not use ocp:endsPhase."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ocp:endsCycle ;
            sh:maxCount 0 ;
            sh:message "A Transition must not use ocp:endsCycle."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ocp:startsPhase ;
            sh:maxCount 0 ;
            sh:message "A Transition must not use ocp:startsPhase."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ocp:startsCycle ;
            sh:maxCount 0 ;
            sh:message "A Transition must not use ocp:startsCycle."@en ;
            sh:severity sh:Violation ;
        ] .


#################################################################
#    ADDITIONAL SPARQL Queries
#################################################################

### GENERIC TIME QUERIES

    # Shape for time:after constraints
    osh:AfterTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?other ?startTime ?endTime
                WHERE {
                    $this time:after ?other .
                    $this ocp:hasActualBeginning ?startInstant .
                    ?startInstant ocp:hasActualTime ?startTime .
                    ?other ocp:hasActualEnd ?endInstant .
                    ?endInstant ocp:hasActualTime ?endTime .
                    FILTER (?startTime <= ?endTime)
                }
            """ ;
            sh:message "For temporal entity {$this}: Actual start time ({?startTime}) is not after actual end time ({?endTime}) of entity {?other} as required by time:after."@en ;
            sh:severity sh:Violation
        ] .

    # Shape for time:before constraints
    osh:BeforeTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?other ?endTime ?startTime
                WHERE {
                    $this time:before ?other .
                    $this ocp:hasActualEnd ?endInstant .
                    ?endInstant ocp:hasActualTime ?endTime .
                    ?other ocp:hasActualBeginning ?startInstant .
                    ?startInstant ocp:hasActualTime ?startTime .
                    FILTER (?endTime >= ?startTime)
                }
            """ ;
            sh:message "For temporal entity {$this}: Actual end time ({?endTime}) is not before actual start time ({?startTime}) of entity {?other} as required by time:before."@en ;
            sh:severity sh:Violation
        ] .

    # Shape for ocp:beginsAfter constraints
    osh:BeginsAfterTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?other ?startTime ?otherEndTime
                WHERE {
                    $this ocp:beginsAfter ?other .
                    $this ocp:hasActualBeginning ?startInstant .
                    ?startInstant ocp:hasActualTime ?startTime .
                    ?other ocp:hasActualEnd ?otherEndInstant .
                    ?otherEndInstant ocp:hasActualTime ?otherEndTime .
                    FILTER (?startTime <= ?otherEndTime)
                }
            """ ;
            sh:message "For temporal entity {$this}: Actual start time ({?startTime}) is not after actual end time ({?otherEndTime}) of entity {?other} as required by ocp:beginsAfter."@en ;
            sh:severity sh:Violation
        ] .

    # Shape for ocp:beginsBefore constraints
    osh:BeginsBeforeTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?other ?startTime ?otherTime
                WHERE {
                    $this ocp:beginsBefore ?other .
                    $this ocp:hasActualBeginning ?startInstant .
                    ?startInstant ocp:hasActualTime ?startTime .
                    ?other ocp:hasActualTime ?otherTime .
                    FILTER (?startTime >= ?otherTime)
                }
            """ ;
            sh:message "For temporal entity {$this}: Actual start time ({?startTime}) is not before actual time ({?otherTime}) of instant {?other} as required by ocp:beginsBefore."@en ;
            sh:severity sh:Violation
        ] .

    # Shape for ocp:endsAfter constraints
    osh:EndsAfterTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?other ?endTime ?otherEndTime
                WHERE {
                    $this ocp:endsAfter ?other .
                    $this ocp:hasActualEnd ?endInstant .
                    ?endInstant ocp:hasActualTime ?endTime .
                    ?other ocp:hasActualEnd ?otherEndInstant .
                    ?otherEndInstant ocp:hasActualTime ?otherEndTime .
                    FILTER (?endTime <= ?otherEndTime)
                }
            """ ;
            sh:message "For temporal entity {$this}: Actual end time ({?endTime}) must be after actual end time ({?otherEndTime}) of entity {?other} via ocp:endsAfter."@en ;
            sh:severity sh:Violation
        ] .

    # Shape for ocp:endsBefore constraints
    osh:EndsBeforeTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?other ?endTime ?otherTime
                WHERE {
                    $this ocp:endsBefore ?other .
                    $this ocp:hasActualEnd ?endInstant .
                    ?endInstant ocp:hasActualTime ?endTime .
                    ?other ocp:hasActualTime ?otherTime .
                    FILTER (?endTime >= ?otherTime)
                }
            """ ;
            sh:message "For temporal entity {$this}: Actual end time ({?endTime}) is not before actual time ({?otherTime}) of instant {?other} as required by ocp:endsBefore."@en ;
            sh:severity sh:Violation
        ] .



    # Shape for ocp:beginsWith constraints
    osh:BeginsWithTimeShape a sh:NodeShape ;
        sh:targetClass time:Interval ;
        sh:property [
            sh:path ocp:beginsWith ;
            sh:class time:TemporalEntity ;
            sh:minCount 0 ;
            sh:maxCount 1 ;
            sh:message "The object of 'ocp:beginsWith' must be a 'time:TemporalEntity'."@en ;
            sh:severity sh:Violation
        ] ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?value ?startTime ?valueStartTime
                WHERE {
                    $this ocp:beginsWith ?value .
                    $this ocp:hasActualBeginning ?thisInstant .
                    ?thisInstant ocp:hasActualTime ?startTime .
                    ?value ocp:hasActualBeginning ?valueInstant .
                    ?valueInstant ocp:hasActualTime ?valueStartTime .
                    FILTER (?startTime != ?valueStartTime)
                }
            """ ;
            sh:message "For 'time:Interval' {$this}: Actual start time ({?startTime}) does not match actual start time ({?valueStartTime}) of entity {$value} referenced by 'ocp:beginsWith'."@en ;
            sh:severity sh:Violation
        ] .

    # Shape for ocp:endsWith constraints
    osh:EndsWithTimeShape a sh:NodeShape ;
        sh:targetClass time:Interval ;
        sh:property [
            sh:path ocp:endsWith ;
            sh:class time:TemporalEntity ;
            sh:minCount 0 ;
            sh:maxCount 1 ;
            sh:message "The object of 'ocp:endsWith' must be a 'time:TemporalEntity'."@en ;
            sh:severity sh:Violation
        ] ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?value ?endTime ?valueEndTime
                WHERE {
                    $this ocp:endsWith ?value .
                    $this ocp:hasActualEnd ?thisInstant .
                    ?thisInstant ocp:hasActualTime ?endTime .
                    ?value ocp:hasActualEnd ?valueInstant .
                    ?valueInstant ocp:hasActualTime ?valueEndTime .
                    FILTER (?endTime != ?valueEndTime)
                }
            """ ;
            sh:message "For 'time:Interval' {$this}: Actual end time ({?endTime}) does not match actual end time ({?valueEndTime}) of entity {$value} referenced by 'ocp:endsWith'."@en ;
            sh:severity sh:Violation
        ] .