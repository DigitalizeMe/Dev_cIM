@prefix sh:    <http://www.w3.org/ns/shacl#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#> .
@prefix time:  <http://www.w3.org/2006/time#> .
@prefix osh:   <http://www.ocpshape.de/shape#> .

#################################################################
#    SHACL Shapes
#################################################################

### GENERAL SHACL SHAPES

    osh:GeneralDatePropertyShape a sh:PropertyShape ;
        sh:path ( ocp:hasActualTime ocp:hasEstimatedTime ) ;
        sh:datatype xsd:date ;
        sh:message "Dates must be in YYYY-MM-DD format."@en ;
        sh:severity sh:Violation .

    osh:GeneralTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:property [
            sh:path ocp:hasActualBeginning ;
            sh:class time:Instant ;
            sh:maxCount 1 ;
            sh:message "Each entity must have at most one actual beginning via 'ocp:hasActualBeginning'."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ocp:hasActualEnd ;
            sh:class time:Instant ;
            sh:maxCount 1 ;
            sh:message "Each entity must have at most one actual end via 'ocp:hasActualEnd'."@en ;
            sh:severity sh:Violation ;
        ] .

    osh:PhaseTimeExistenceShape a sh:NodeShape ;
        sh:targetClass ocp:Phase ;
        # Constraint for cardinality of actual beginnings (direct or via beginsWith)
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    # Count distinct actual beginnings
                    {
                        SELECT $this (COUNT(DISTINCT ?start) AS ?count)
                        WHERE {
                            { $this ocp:hasActualBeginning ?start . ?start ocp:hasActualTime ?startTime . }
                            UNION
                            { $this ocp:beginsWith ?entity . ?entity (ocp:beginsWith)* ?start .
                            ?start a time:Instant ; ocp:hasActualTime ?startTime . }
                        }
                        GROUP BY $this
                        HAVING (?count > 1)
                    }
                }
            """ ;
            sh:message "Each phase must have at most one actual beginning (via ocp:hasActualBeginning or ocp:beginsWith leading to an instant with ocp:hasActualTime)."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for actual beginning requiring an end
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?start
                WHERE {
                    # Find phases with an actual beginning
                    {
                        $this ocp:hasActualBeginning ?start . ?start ocp:hasActualTime ?startTime .
                    } UNION
                    {
                        $this ocp:beginsWith ?entity . ?entity (ocp:beginsWith)* ?start .
                        ?start a time:Instant ; ocp:hasActualTime ?startTime .
                    }
                    # Check if no end exists
                    FILTER NOT EXISTS {
                        {
                            $this ocp:hasActualEnd ?end . ?end ocp:hasActualTime ?endTime .
                        } UNION
                        {
                            $this ocp:hasEstimatedEnd ?end . ?end ocp:hasEstimatedTime ?endTime .
                        } UNION
                        {
                            $this ocp:endsWith ?endEntity . ?endEntity (ocp:endsWith)* ?end .
                            ?end a time:Instant ; ocp:hasActualTime ?endTime .
                        } UNION
                        {
                            $this ocp:endsWith ?endEntity . ?endEntity (ocp:endsWith)* ?end .
                            ?end a time:Instant ; ocp:hasEstimatedTime ?endTime .
                        }
                    }
                }
            """ ;
            sh:message "Phase {$this} with actual beginning (via ocp:hasActualBeginning or ocp:beginsWith to instant {$start} with ocp:hasActualTime) lacks an end (via ocp:hasActualEnd, ocp:hasEstimatedEnd, or ocp:endsWith)."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for estimated beginning requiring an end
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?start
                WHERE {
                    # Find phases with an estimated beginning
                    {
                        $this ocp:hasEstimatedBeginning ?start . ?start ocp:hasEstimatedTime ?startTime .
                    } UNION
                    {
                        $this ocp:beginsWith ?entity . ?entity (ocp:beginsWith)* ?start .
                        ?start a time:Instant ; ocp:hasEstimatedTime ?startTime .
                    }
                    # Check if no end exists
                    FILTER NOT EXISTS {
                        {
                            $this ocp:hasActualEnd ?end . ?end ocp:hasActualTime ?endTime .
                        } UNION
                        {
                            $this ocp:hasEstimatedEnd ?end . ?end ocp:hasEstimatedTime ?endTime .
                        } UNION
                        {
                            $this ocp:endsWith ?endEntity . ?endEntity (ocp:endsWith)* ?end .
                            ?end a time:Instant ; ocp:hasActualTime ?endTime .
                        } UNION
                        {
                            $this ocp:endsWith ?endEntity . ?endEntity (ocp:endsWith)* ?end .
                            ?end a time:Instant ; ocp:hasEstimatedTime ?endTime .
                        }
                    }
                }
            """ ;
            sh:message "Phase {$this} with estimated beginning (via ocp:hasEstimatedBeginning or ocp:beginsWith to instant {$start} with ocp:hasEstimatedTime) lacks an end (via ocp:hasActualEnd, ocp:hasEstimatedEnd, or ocp:endsWith)."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for cardinality of actual beginning
        sh:property [
            sh:path ocp:hasActualBeginning ;
            sh:maxCount 1 ;
            sh:class time:Instant ;
            sh:message "Each phase must have at most one ocp:hasActualBeginning referencing a time:Instant."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for cardinality of actual end
        sh:property [
            sh:path ocp:hasActualEnd ;
            sh:maxCount 1 ;
            sh:class time:Instant ;
            sh:message "Each phase must have at most one ocp:hasActualEnd referencing a time:Instant."@en ;
            sh:severity sh:Violation
        ] .

    osh:PhaseTimeOrderShape a sh:NodeShape ;
        sh:targetClass ocp:Phase ;
        # Constraint for belongsToProcess or inverse containsPhase
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                SELECT $this
                WHERE {
                    # Check if phase has no belongsToProcess and not exactly one containsPhase
                    FILTER NOT EXISTS { $this ocp:belongsToProcess ?process . ?process a ocp:Process . }
                    {
                        SELECT $this (COUNT(?p) AS ?count)
                        WHERE { ?p ocp:containsPhase $this . ?p a ocp:Process . }
                        GROUP BY $this
                        HAVING (?count != 1)
                    }
                }
            """ ;
            sh:message "Phase {$this} must either belong to exactly one process via ocp:belongsToProcess or be contained by exactly one process via ocp:containsPhase."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure beginning is before end
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?timeStart ?timeEnd
                WHERE {
                    # Find beginning (actual or estimated)
                    { $this ocp:hasActualBeginning ?start . ?start ocp:hasActualTime ?timeStart . }
                    UNION
                    { $this ocp:beginsWith ?startEntity . ?startEntity (ocp:beginsWith)* ?start .
                    ?start a time:Instant ; ocp:hasActualTime ?timeStart . }
                    UNION
                    { $this ocp:hasEstimatedBeginning ?start . ?start ocp:hasEstimatedTime ?timeStart . }
                    UNION
                    { $this ocp:beginsWith ?startEntity . ?startEntity (ocp:beginsWith)* ?start .
                    ?start a time:Instant ; ocp:hasEstimatedTime ?timeStart . }
                    # Find end (actual or estimated)
                    { $this ocp:hasActualEnd ?end . ?end ocp:hasActualTime ?timeEnd . }
                    UNION
                    { $this ocp:endsWith ?endEntity . ?endEntity (ocp:endsWith)* ?end .
                    ?end a time:Instant ; ocp:hasActualTime ?timeEnd . }
                    UNION
                    { $this ocp:hasEstimatedEnd ?end . ?end ocp:hasEstimatedTime ?timeEnd . }
                    UNION
                    { $this ocp:endsWith ?endEntity . ?endEntity (ocp:endsWith)* ?end .
                    ?end a time:Instant ; ocp:hasEstimatedTime ?timeEnd . }
                    FILTER (?timeStart >= ?timeEnd)
                }
            """ ;
            sh:message "For phase {$this}: Beginning time ({?timeStart} via ocp:hasActualBeginning, ocp:hasEstimatedBeginning, or ocp:beginsWith) must be before end time ({?timeEnd} via ocp:hasActualEnd, ocp:hasEstimatedEnd, or ocp:endsWith)."@en ;
            sh:severity sh:Violation
        ] .

    osh:InstantTimeShape a sh:NodeShape ;
        sh:targetClass time:Instant ;
        sh:property [
            sh:path [ sh:alternativePath ( ocp:hasActualTime ocp:hasEstimatedTime ) ] ;
            sh:qualifiedValueShape [
                sh:datatype xsd:date ;
            ] ;
            sh:qualifiedMinCount 1 ;
            sh:message "Each instant must have at least one timestamp (either 'ocp:hasActualTime' or 'ocp:hasEstimatedTime') of type xsd:date."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path ocp:hasActualTime ;
            sh:datatype xsd:date ;
            sh:maxCount 1 ;
            sh:message "Each instant must have at most one actual timestamp via ocp:hasActualTime of type xsd:date."@en ;
            sh:severity sh:Violation ;
        ] .

    osh:CycleShape a sh:NodeShape ;
        sh:targetClass ocp:Cycle ;
        sh:property [
            sh:path ocp:belongsToProcess ;
            sh:class ocp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'ocp:Cycle' must belong to exactly one 'ocp:Process' via 'ocp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasCycleNumber
        sh:property [
            sh:path ocp:hasCycleNumber ;
            sh:datatype xsd:integer ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:minInclusive 1 ;
            sh:message "Each 'ocp:Cycle' must specify exactly one positive integer via 'ocp:hasCycleNumber' to indicate the number of iterations."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasActualBeginning
        sh:property [
            sh:path ocp:hasActualBeginning ;
            sh:class time:Instant ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'ocp:Cycle' must have exactly one 'ocp:hasActualBeginning' referencing a 'time:Instant' to mark its start."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for end (at least one end: actual or estimated, but max 1 actualEnd)
        sh:property [
            sh:path ocp:hasActualEnd ;
            sh:class time:Instant ;
            sh:maxCount 1 ;
            sh:message "Each 'ocp:Cycle' must have at most one 'ocp:hasActualEnd' referencing a 'time:Instant'."@en ;
            sh:severity sh:Violation
        ] ;
        sh:or (
            [ sh:property [ sh:path ocp:hasActualEnd ; sh:minCount 1 ; sh:class time:Instant ] ]
            [ sh:property [ sh:path ocp:hasEstimatedEnd ; sh:minCount 1 ; sh:class time:Instant ] ]
        ) ;
        sh:message "Each 'ocp:Cycle' must have at least one end (either 'ocp:hasActualEnd' or 'ocp:hasEstimatedEnd') referencing a 'time:Instant'."@en ;
        sh:severity sh:Violation .

    osh:ProcessShape a sh:NodeShape ;
        sh:targetClass ocp:Process ;
        # Constraint for hasProcessID
        sh:property [
            sh:path ocp:hasProcessID ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'ocp:Process' must have exactly one 'ocp:hasProcessID' of type xsd:string to provide a unique identifier."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for containsPhase (process contains phases)
        sh:property [
            sh:path ocp:containsPhase ;
            sh:minCount 1 ;
            sh:message "Each 'ocp:Process' must consist of at least one instance of 'ocp:Phase' connected via 'ocp:containsPhase'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for isInPhase (process is contained in exactly one phase, if present)
        sh:property [
            sh:path ocp:isInPhase ;
            sh:class ocp:Phase ;
            sh:maxCount 1 ;
            sh:message "Each 'ocp:Process' must be embedded in at most one 'ocp:Phase' via 'ocp:isInPhase'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint to ensure phases belong to a process
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                SELECT $this ?phase
                WHERE {
                    $this ocp:containsPhase ?phase .
                    ?phase ocp:belongsToProcess ?otherProcess .
                    FILTER (?otherProcess != $this)
                }
            """ ;
            sh:message "For 'ocp:Process': Each phase contained via 'ocp:containsPhase' must belong to the same process via 'ocp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Removed shapes for beginning and end, because processes contain phases, which have beginnings and ends (should suffice)
        # Prevent inception (process cannot be in a phase it contains)
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                SELECT $this
                WHERE {
                    $this ocp:isInPhase ?phase .
                    $this ocp:hasPhase ?phase .
                }
            """ ;
            sh:message "For 'ocp:Process': A process cannot be embedded in a phase (ocp:isInPhase) that it also contains (ocp:hasPhase)."@en ;
            sh:severity sh:Violation
        ] .
    
    osh:ContainsTemporalEntityShape a sh:NodeShape ;
        sh:targetClass ocp:Process ;
        # Constraint for containsTemporalEntity
        sh:property [
            sh:path ocp:containsTemporalEntity ;
            sh:class time:TemporalEntity ;
            sh:message "Each 'ocp:containsTemporalEntity' must reference an instance of 'time:TemporalEntity' (e.g., time:Instant or time:Interval) that is contained in a 'ocp:Process'."@en ;
            sh:severity sh:Violation
        ] .

    osh:ContainsProcessShape a sh:NodeShape ;
        sh:targetClass ocp:Phase ;
        # Constraint for containsProcess
        sh:property [
            sh:path ocp:containsProcess ;
            sh:class ocp:Process ;
            sh:message "Each 'ocp:containsProcess' must reference an instance of 'ocp:Process' that is contained in a 'ocp:Phase'."@en ;
            sh:severity sh:Violation
        ] ;
        # Prevent cycles involving containsProcess (a phase cannot indirectly contain a process that contains it)
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                SELECT $this
                WHERE {
                    $this ocp:containsProcess ?process .
                    ?process ocp:containsPhase+ ?cycle .
                    FILTER (?cycle = $this)
                }
            """ ;
            sh:message "For 'ocp:Phase': A phase cannot contain a process via 'ocp:containsProcess' that indirectly contains the same phase via 'ocp:containsPhase' (no cycles allowed)."@en ;
            sh:severity sh:Violation
        ] .

    osh:IsInProcessShape a sh:NodeShape ;
        sh:targetClass ocp:Phase ;
        # Constraint for isInProcess
        sh:property [
            sh:path ocp:isInProcess ;
            sh:class ocp:Process ;
            sh:maxCount 1 ;
            sh:message "Each 'ocp:Phase' can be embedded in at most one 'ocp:Process' via 'ocp:isInProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure consistency with containsProcess or containsPhase
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                SELECT $this ?parent
                WHERE {
                    $this ocp:isInProcess ?parent .
                    FILTER NOT EXISTS { ?parent ocp:containsPhase $this }
                    FILTER NOT EXISTS { ?parent ocp:containsProcess $this }
                }
            """ ;
            sh:message "For 'ocp:Phase': If embedded in a process via 'ocp:isInProcess', the parent process must contain it via 'ocp:containsPhase' or 'ocp:containsProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Prevent cycles involving isInProcess
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                SELECT $this
                WHERE {
                    $this ocp:isInProcess ?process .
                    ?process ocp:containsPhase+ ?cycle .
                    FILTER (?cycle = $this)
                }
            """ ;
            sh:message "For 'ocp:Phase': A phase cannot be embedded in a process via 'ocp:isInProcess' that indirectly contains the same phase via 'ocp:containsPhase' (no cycles allowed)."@en ;
            sh:severity sh:Violation
        ] .


#################################################################
#    ADDITIONAL SPARQL Queries
#################################################################

### GENERIC TIME QUERIES

    # Shape for time:after constraints
    osh:AfterTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
                SELECT $this ?other ?earliestStartTime ?latestEndTime ?startInstant ?endInstant
                WHERE {
                    $this time:after ?other .
                    {
                        $this time:hasBeginning ?startInstant .
                        { ?startInstant ocp:hasActualTime ?startTimeValue . }
                        UNION
                        { ?startInstant ocp:hasEstimatedTime ?startTimeValue . }
                    }
                    UNION
                    {
                        $this ocp:beginsWith ?startEntity .
                        ?startEntity (ocp:beginsWith)* ?start .
                        ?start a time:Instant .
                        BIND (?start AS ?startInstant)
                        { ?start ocp:hasActualTime ?startTimeValue . }
                        UNION
                        { ?start ocp:hasEstimatedTime ?startTimeValue . }
                    }
                    UNION
                    {
                        $this ocp:hasActualBeginning ?startInstant .
                        ?startInstant a time:Instant .
                        { ?startInstant ocp:hasActualTime ?startTimeValue . }
                        UNION
                        { ?startInstant ocp:hasEstimatedTime ?startTimeValue . }
                    }
                    {
                        ?other time:hasEnd ?endInstant .
                        { ?endInstant ocp:hasActualTime ?endTimeValue . }
                        UNION
                        { ?endInstant ocp:hasEstimatedTime ?endTimeValue . }
                    }
                    UNION
                    {
                        ?other ocp:endsWith ?endEntity .
                        ?endEntity (ocp:endsWith)* ?end .
                        ?end a time:Instant .
                        BIND (?end AS ?endInstant)
                        { ?end ocp:hasActualTime ?endTimeValue . }
                        UNION
                        { ?end ocp:hasEstimatedTime ?endTimeValue . }
                    }
                    UNION
                    {
                        ?other ocp:hasEstimatedEnd ?endInstant .
                        ?endInstant a time:Instant .
                        { ?endInstant ocp:hasActualTime ?endTimeValue . }
                        UNION
                        { ?endInstant ocp:hasEstimatedTime ?endTimeValue . }
                    }
                    BIND (STRDT(STR(?startTimeValue), xsd:date) AS ?earliestStartTime)
                    BIND (STRDT(STR(?endTimeValue), xsd:date) AS ?latestEndTime)
                    FILTER (?earliestStartTime <= ?latestEndTime)
                }
            """ ;
            sh:message "For temporal entity {$this}: Earliest start time ({?earliestStartTime} from instant {?startInstant}) is not after latest end time ({?latestEndTime} from instant {?endInstant}) of entity {?other} as required by time:after."@en ;
            sh:severity sh:Violation
        ] .


    # Shape for time:before constraints
    osh:BeforeTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
                SELECT $this ?other ?latestEndTime ?earliestStartTime ?endInstant ?startInstant
                WHERE {
                    $this time:before ?other .
                    {
                        $this time:hasEnd ?endInstant .
                        { ?endInstant ocp:hasActualTime ?endTimeValue . }
                        UNION
                        { ?endInstant ocp:hasEstimatedTime ?endTimeValue . }
                    }
                    UNION
                    {
                        $this ocp:endsWith ?endEntity .
                        ?endEntity (ocp:endsWith)* ?end .
                        ?end a time:Instant .
                        BIND (?end AS ?endInstant)
                        { ?end ocp:hasActualTime ?endTimeValue . }
                        UNION
                        { ?end ocp:hasEstimatedTime ?endTimeValue . }
                    }
                    UNION
                    {
                        $this ocp:hasEstimatedEnd ?endInstant .
                        ?endInstant a time:Instant .
                        { ?endInstant ocp:hasActualTime ?endTimeValue . }
                        UNION
                        { ?endInstant ocp:hasEstimatedTime ?endTimeValue . }
                    }
                    {
                        ?other time:hasBeginning ?startInstant .
                        { ?startInstant ocp:hasActualTime ?startTimeValue . }
                        UNION
                        { ?startInstant ocp:hasEstimatedTime ?startTimeValue . }
                    }
                    UNION
                    {
                        ?other ocp:beginsWith ?startEntity .
                        ?startEntity (ocp:beginsWith)* ?start .
                        ?start a time:Instant .
                        BIND (?start AS ?startInstant)
                        { ?start ocp:hasActualTime ?startTimeValue . }
                        UNION
                        { ?start ocp:hasEstimatedTime ?startTimeValue . }
                    }
                    UNION
                    {
                        ?other ocp:hasActualBeginning ?startInstant .
                        ?startInstant a time:Instant .
                        { ?startInstant ocp:hasActualTime ?startTimeValue . }
                        UNION
                        { ?startInstant ocp:hasEstimatedTime ?startTimeValue . }
                    }
                    BIND (STRDT(STR(?endTimeValue), xsd:date) AS ?latestEndTime)
                    BIND (STRDT(STR(?startTimeValue), xsd:date) AS ?earliestStartTime)
                    FILTER (?latestEndTime > ?earliestStartTime)
                }
            """ ;
            sh:message "For temporal entity {$this}: Latest end time ({?latestEndTime} from instant {?endInstant}) is not before earliest start time ({?earliestStartTime} from instant {?startInstant}) of entity {?other} as required by time:before."@en ;
            sh:severity sh:Violation
        ] .


    # Shape for ocp:beginsBefore constraints
    osh:BeginsBeforeTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
                SELECT $this ?other ?earliestStartTime ?otherTime ?startInstant
                WHERE {
                    $this ocp:beginsBefore ?other .
                    {
                        $this time:hasBeginning ?startInstant .
                        { ?startInstant ocp:hasActualTime ?startTimeValue . }
                        UNION
                        { ?startInstant ocp:hasEstimatedTime ?startTimeValue . }
                    }
                    UNION
                    {
                        $this ocp:beginsWith ?startEntity .
                        ?startEntity (ocp:beginsWith)* ?start .
                        ?start a time:Instant .
                        BIND (?start AS ?startInstant)
                        { ?start ocp:hasActualTime ?startTimeValue . }
                        UNION
                        { ?start ocp:hasEstimatedTime ?startTimeValue . }
                    }
                    UNION
                    {
                        $this ocp:hasActualBeginning ?startInstant .
                        ?startInstant a time:Instant .
                        { ?startInstant ocp:hasActualTime ?startTimeValue . }
                        UNION
                        { ?startInstant ocp:hasEstimatedTime ?startTimeValue . }
                    }
                    {
                        ?other a time:Instant .
                        { ?other ocp:hasActualTime ?otherTimeValue . }
                        UNION
                        { ?other ocp:hasEstimatedTime ?otherTimeValue . }
                    }
                    BIND (STRDT(STR(?startTimeValue), xsd:date) AS ?earliestStartTime)
                    BIND (STRDT(STR(?otherTimeValue), xsd:date) AS ?otherTime)
                    FILTER (?earliestStartTime >= ?otherTime)
                }
            """ ;
            sh:message "For temporal entity {$this}: Earliest start time ({?earliestStartTime} from instant {?startInstant}) is not before the time ({?otherTime}) of instant {?other} as required by ocp:beginsBefore."@en ;
            sh:severity sh:Violation
        ] .

    # Shape for ocp:endsBefore constraints
    osh:EndsBeforeTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
                SELECT $this ?other ?latestEndTime ?otherTime ?endInstant
                WHERE {
                    $this ocp:endsBefore ?other .
                    {
                        $this time:hasEnd ?endInstant .
                        { ?endInstant ocp:hasActualTime ?endTimeValue . }
                        UNION
                        { ?endInstant ocp:hasEstimatedTime ?endTimeValue . }
                    }
                    UNION
                    {
                        $this ocp:endsWith ?endEntity .
                        ?endEntity (ocp:endsWith)* ?end .
                        ?end a time:Instant .
                        BIND (?end AS ?endInstant)
                        { ?end ocp:hasActualTime ?endTimeValue . }
                        UNION
                        { ?end ocp:hasEstimatedTime ?endTimeValue . }
                    }
                    UNION
                    {
                        $this ocp:hasEstimatedEnd ?endInstant .
                        ?endInstant a time:Instant .
                        { ?endInstant ocp:hasActualTime ?endTimeValue . }
                        UNION
                        { ?endInstant ocp:hasEstimatedTime ?endTimeValue . }
                    }
                    {
                        ?other a time:Instant .
                        { ?other ocp:hasActualTime ?otherTimeValue . }
                        UNION
                        { ?other ocp:hasEstimatedTime ?otherTimeValue . }
                    }
                    BIND (STRDT(STR(?endTimeValue), xsd:date) AS ?latestEndTime)
                    BIND (STRDT(STR(?otherTimeValue), xsd:date) AS ?otherTime)
                    FILTER (?latestEndTime >= ?otherTime)
                }
            """ ;
            sh:message "For temporal entity {$this}: Latest end time ({?latestEndTime} from instant {?endInstant}) is not before the time ({?otherTime}) of instant {?other} as required by ocp:endsBefore."@en ;
            sh:severity sh:Violation
        ] .

    # Shape for ocp:endsAfter constraints
    osh:EndsAfterTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?other ?latestEndTime ?otherLatestEndTime
                WHERE {
                    $this ocp:endsAfter ?other .
                    {
                        SELECT $this (MAX(?endTimeValue) AS ?latestEndTime)
                        WHERE {
                            { $this time:hasEnd ?endInstant . ?endInstant ocp:hasActualTime ?endTimeValue . }
                            UNION
                            { $this ocp:endsWith ?endEntity . ?endEntity (ocp:endsWith)* ?end .
                            ?end a time:Instant ; ocp:hasActualTime ?endTimeValue . }
                            UNION
                            { $this time:hasEnd ?endInstant . ?endInstant ocp:hasEstimatedTime ?endTimeValue . }
                            UNION
                            { $this ocp:endsWith ?endEntity . ?endEntity (ocp:endsWith)* ?end .
                            ?end a time:Instant ; ocp:hasEstimatedTime ?endTimeValue . }
                        }
                        GROUP BY $this
                        HAVING (BOUND(?latestEndTime))
                    }
                    {
                        SELECT ?other (MAX(?otherEndTimeValue) AS ?otherLatestEndTime)
                        WHERE {
                            { ?other time:hasEnd ?otherEndInstant . ?otherEndInstant ocp:hasActualTime ?otherEndTimeValue . }
                            UNION
                            { ?other ocp:endsWith ?otherEndEntity . ?otherEndEntity (ocp:endsWith)* ?otherEnd .
                            ?otherEnd a time:Instant ; ocp:hasActualTime ?otherEndTimeValue . }
                            UNION
                            { ?other time:hasEnd ?otherEndInstant . ?otherEndInstant ocp:hasEstimatedTime ?otherEndTimeValue . }
                            UNION
                            { ?other ocp:endsWith ?otherEndEntity . ?otherEndEntity (ocp:endsWith)* ?otherEnd .
                            ?otherEnd a time:Instant ; ocp:hasEstimatedTime ?otherEndTimeValue . }
                        }
                        GROUP BY ?other
                        HAVING (BOUND(?otherLatestEndTime))
                    }
                    FILTER (?latestEndTime <= ?otherLatestEndTime)
                }
            """ ;
            sh:message "For temporal entity {$this}: Latest end time ({?latestEndTime} via time:hasEnd or ocp:endsWith) must be after latest end time ({?otherLatestEndTime} via time:hasEnd or ocp:endsWith) of entity {?other} via ocp:endsAfter."@en ;
            sh:severity sh:Violation
        ] .

    # Shape for ocp:beginsWith constraints
    osh:BeginsWithTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:property [
            sh:path ocp:beginsWith ;
            sh:class time:Instant ;
            sh:minCount 0 ;
            sh:maxCount 1 ;
            sh:message "For 'time:TemporalEntity': The object of 'ocp:beginsWith' must be a 'time:Instant'."@en ;
            sh:severity sh:Violation
        ] ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?value ?timeValue
                WHERE {
                    $this ocp:beginsWith ?value .
                    ?value a time:Instant .
                    FILTER NOT EXISTS { ?value ocp:hasActualTime ?timeValue }
                    FILTER NOT EXISTS { ?value ocp:hasEstimatedTime ?timeValue }
                }
            """ ;
            sh:message "For 'time:TemporalEntity' {$this}: The instant {$value} referenced by 'ocp:beginsWith' must have a time value (ocp:hasActualTime or ocp:hasEstimatedTime)."@en ;
            sh:severity sh:Violation
        ] ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?value ?timeValue ?otherInstant ?otherTimeValue
                WHERE {
                    $this ocp:beginsWith ?value .
                    ?value a time:Instant .
                    { ?value ocp:hasActualTime ?timeValue . }
                    UNION
                    { ?value ocp:hasEstimatedTime ?timeValue . }
                    $this time:hasBeginning ?otherInstant .
                    { ?otherInstant ocp:hasActualTime ?otherTimeValue . }
                    UNION
                    { ?otherInstant ocp:hasEstimatedTime ?otherTimeValue . }
                    FILTER (?timeValue != ?otherTimeValue)
                }
            """ ;
            sh:message "For 'time:TemporalEntity' {$this}: The time value ({?timeValue}) of instant {$value} referenced by 'ocp:beginsWith' does not match the time value ({?otherTimeValue}) of instant {?otherInstant} referenced by 'time:hasBeginning'."@en ;
            sh:severity sh:Violation
        ] .

    # Shape for ocp:endsWith constraints
    osh:EndsWithTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:property [
            sh:path ocp:endsWith ;
            sh:class time:Instant ;
            sh:minCount 0 ;
            sh:maxCount 1 ;
            sh:message "For 'time:TemporalEntity': The object of 'ocp:endsWith' must be a 'time:Instant'."@en ;
            sh:severity sh:Violation
        ] ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?value ?timeValue
                WHERE {
                    $this ocp:endsWith ?value .
                    ?value a time:Instant .
                    FILTER NOT EXISTS { ?value ocp:hasActualTime ?timeValue }
                    FILTER NOT EXISTS { ?value ocp:hasEstimatedTime ?timeValue }
                }
            """ ;
            sh:message "For 'time:TemporalEntity' {$this}: The instant {$value} referenced by 'ocp:endsWith' must have a time value (ocp:hasActualTime or ocp:hasEstimatedTime)."@en ;
            sh:severity sh:Violation
        ] ;
        sh:sparql [
            sh:select """
                PREFIX ocp: <http://www.semanticweb.org/DigitalizeMe/ontologies/2025/3/OCP#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?value ?timeValue ?otherInstant ?otherTimeValue
                WHERE {
                    $this ocp:endsWith ?value .
                    ?value a time:Instant .
                    { ?value ocp:hasActualTime ?timeValue . }
                    UNION
                    { ?value ocp:hasEstimatedTime ?timeValue . }
                    $this time:hasEnd ?otherInstant .
                    { ?otherInstant ocp:hasActualTime ?otherTimeValue . }
                    UNION
                    { ?otherInstant ocp:hasEstimatedTime ?otherTimeValue . }
                    FILTER (?timeValue != ?otherTimeValue)
                }
            """ ;
            sh:message "For 'time:TemporalEntity' {$this}: The time value ({?timeValue}) of instant {$value} referenced by 'ocp:endsWith' does not match the time value ({?otherTimeValue}) of instant {?otherInstant} referenced by 'time:hasEnd'."@en ;
            sh:severity sh:Violation
        ] .
